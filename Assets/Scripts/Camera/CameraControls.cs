//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Camera/CameraControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControls"",
    ""maps"": [
        {
            ""name"": ""Rotate Camera"",
            ""id"": ""0db152b3-1c4d-4f7f-8fb1-51d2019ba9af"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bfb07bca-65c4-4442-a136-3e8c1f919ce7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""4d4b7f35-0073-47da-a48a-3dabb26d3e05"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e13e093f-556c-45d5-b5c9-4a8f02712ef2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""20b331ca-21f8-4fce-adae-2046a54ea745"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""227d2fe0-a253-40c3-a24d-270ff6ac5c3b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8835ec66-407d-4b27-b170-4c7bb657b210"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Android"",
                    ""id"": ""eef16154-718c-43a7-9f5d-772783eaee64"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""da5ac078-e3cc-4914-996a-2546c7107a0f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""899e725a-2bba-42de-b50f-9f2a03eea53b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""42ca18e7-889e-499c-bb8a-fa76ae4f6682"",
                    ""path"": ""<Touchscreen>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""747f9d3e-2a47-4dfa-a071-078e7c4094b6"",
                    ""path"": ""<Touchscreen>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Zoom Camera"",
            ""id"": ""c3ff2201-6719-4b13-8bc5-a0a4fbbd6ec5"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""486a77b5-de2b-41f7-a010-97b30053d387"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68991eff-501c-4cc0-a470-125169464bba"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Move Camera"",
            ""id"": ""f131b777-b23c-4e59-bc42-34839c04279c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""80dad89b-0a9d-4968-8ae5-e8a6aceeefe8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5af8f5e2-1a89-4108-bb22-345241ef1388"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Rotate Camera
        m_RotateCamera = asset.FindActionMap("Rotate Camera", throwIfNotFound: true);
        m_RotateCamera_Rotation = m_RotateCamera.FindAction("Rotation", throwIfNotFound: true);
        // Zoom Camera
        m_ZoomCamera = asset.FindActionMap("Zoom Camera", throwIfNotFound: true);
        m_ZoomCamera_Zoom = m_ZoomCamera.FindAction("Zoom", throwIfNotFound: true);
        // Move Camera
        m_MoveCamera = asset.FindActionMap("Move Camera", throwIfNotFound: true);
        m_MoveCamera_Move = m_MoveCamera.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rotate Camera
    private readonly InputActionMap m_RotateCamera;
    private List<IRotateCameraActions> m_RotateCameraActionsCallbackInterfaces = new List<IRotateCameraActions>();
    private readonly InputAction m_RotateCamera_Rotation;
    public struct RotateCameraActions
    {
        private @CameraControls m_Wrapper;
        public RotateCameraActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_RotateCamera_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_RotateCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateCameraActions set) { return set.Get(); }
        public void AddCallbacks(IRotateCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IRotateCameraActions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IRotateCameraActions instance)
        {
            if (m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotateCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_RotateCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotateCameraActions @RotateCamera => new RotateCameraActions(this);

    // Zoom Camera
    private readonly InputActionMap m_ZoomCamera;
    private List<IZoomCameraActions> m_ZoomCameraActionsCallbackInterfaces = new List<IZoomCameraActions>();
    private readonly InputAction m_ZoomCamera_Zoom;
    public struct ZoomCameraActions
    {
        private @CameraControls m_Wrapper;
        public ZoomCameraActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_ZoomCamera_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_ZoomCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ZoomCameraActions set) { return set.Get(); }
        public void AddCallbacks(IZoomCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_ZoomCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ZoomCameraActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
        }

        private void UnregisterCallbacks(IZoomCameraActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
        }

        public void RemoveCallbacks(IZoomCameraActions instance)
        {
            if (m_Wrapper.m_ZoomCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IZoomCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_ZoomCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ZoomCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ZoomCameraActions @ZoomCamera => new ZoomCameraActions(this);

    // Move Camera
    private readonly InputActionMap m_MoveCamera;
    private List<IMoveCameraActions> m_MoveCameraActionsCallbackInterfaces = new List<IMoveCameraActions>();
    private readonly InputAction m_MoveCamera_Move;
    public struct MoveCameraActions
    {
        private @CameraControls m_Wrapper;
        public MoveCameraActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MoveCamera_Move;
        public InputActionMap Get() { return m_Wrapper.m_MoveCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveCameraActions set) { return set.Get(); }
        public void AddCallbacks(IMoveCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveCameraActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMoveCameraActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMoveCameraActions instance)
        {
            if (m_Wrapper.m_MoveCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveCameraActions @MoveCamera => new MoveCameraActions(this);
    public interface IRotateCameraActions
    {
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IZoomCameraActions
    {
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IMoveCameraActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
